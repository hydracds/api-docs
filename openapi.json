openapi: 3.0.0
info:
  title: Cardexscan APIs
  description: >-
    API Documentation for CDS Public. MIT Licensed. Subjected to personal use. Rate limiting is in effect.
    For Commercial Use, Connect with CDS Team.
  version: 1.0.1
servers:
  - url: https://cardexscan.com
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
paths:
  /api/cds/swap/aggregate:
    post:
      tags:
        - Swaps
      summary: Get Aggregated Swaps Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Stringified JSON object
              example: {
                "tokenInAmount": 1000,
                "slippage": 1,
                "tokenIn": "lovelace",
                "tokenOut": {
                    "policyId": "279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3f",
                    "nameHex": "534e454b",
                    "decimals": 0,
                    "verified": false,
                    "ticker": "SNEK"
                },
                "blacklisted_dexes": [
                    "CERRA",
                    "GENIUS",
                    "TEDDYSWAP",
                    "SPECTRUM"
                ]
            }
      security:
        - noauthAuth: []
      parameters:
        - name: content-type
          in: header
          schema:
            type: string
          example: application/json
        - name: x-api-key
          in: header
          schema:
            type: string
          example: 7c6095cf2eeeac500667241439ab5c3eac2488b9962526ca7f543d76b56a7b2
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                type: object
                description: Stringified JSON object
                example: {"data":{"splits":[{"estimatedAmount":"146867","dex":"VyFinance","minimumAmount":145412,"priceImpact":0.2533434871925144,"splitPercent":71.41,"amountIn":714.1,"deposits":2000000,"batcherFee":2000000},{"estimatedAmount":"58744","dex":"WingRiders","minimumAmount":58162,"priceImpact":0.4592331054831607,"splitPercent":28.59,"amountIn":285.9,"deposits":2000000,"batcherFee":2000000}],"estimatedTotalRecieve":205611},"error":null}
  /api/cds/swap/cbor/build:
    post:
      tags:
        - Swaps
      summary: Get Aggregated Swap Unsigned Tx CBOR
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Stringified JSON object
              example: {
                  "tokenInAmount": 5,
                  "slippage": 1,
                  "tokenIn": "lovelace",
                  "tokenOut": {
                      "policyId": "279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3f",
                      "nameHex": "534e454b",
                      "decimals": 0,
                      "verified": true,
                      "ticker": "SNEK"
                  },
                  "blacklisted_dexes": [
                      "CERRA",
                      "GENIUS",
                      "TEDDYSWAP",
                      "SPECTRUM"
                  ],
                  "userAddress": "addr1qx2u9j732u24pzdgr7kv5s3mra5hldzgq6spgjclp02urdfsl0pf0vqz942h3gru5cudxjajqme6h886gpg5jdftzcyqqkjcj3"
              }
      parameters:
        - name: content-type
          in: header
          schema:
            type: string
          example: application/json
        - name: x-api-key
          in: header
          schema:
            type: string
          example: 7c6095cf2eeeac500667241439ab5c3eac2488b9962526ca7f543d76b56a7b2
      responses:
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                type: object
                description: Stringified JSON object
                example: {"data":{"txCbor":"84a500d90102848258203f39bd440320357458d68392bfbd2320bf4524212f0c4ee4d87923f0af1c3f83018258203f39bd440320357458d68392bfbd2320bf4524212f0c4ee4d87923f0af1c3f83028258203f39bd440320357458d68392bfbd2320bf4524212f0c4ee4d87923f0af1c3f83038258203f39bd440320357458d68392bfbd2320bf4524212f0c4ee4d87923f0af1c3f8305018383581d712c0f418d944902f96424cbc65283a18bd16f29386a4912bda3d8f1f81a008954405820da49caaeff4537e6e2f82100d58f1fa86806bfa6c9e4a019c46f90f91adb72ae825839016503c41c1bf43cf377a0fd6b8ff8d4a6a4f5b442dd1948eb24957d5a595ce228437797809f04f2f7629af527c394d674aad6b8eba956c0b11a000ecc168258390195c2cbd157155089a81facca423b1f697fb44806a0144b1f0bd5c1b530fbc297b0022d5578a07ca638d34bb206f3ab9cfa405149352b1608821a00e3bb5cb83c581cafbcd47e0a0fd9300c7df2fac45475a45d09605e1394f91eda90bfc2a148434554415244494f1a002e7133581cb12c1b760b060e5981e4a11f2469bf9913834f3ce0a1db5919a409e1a1474d4f4d424142591a0004544c581cbb039cdf02f40c993ba4f2ed9bf8b357061ae7fef623ffe92b01048ea1444f494e4b1a000872e9581cbe30d405da8309b741242d9b03d85b4fc03666465a95d893338513bba145434855434b1a004b014b581cc0ce0189a9bd653ad5d894bcfd881959bf559f34f102d23e8c95ce9ea143566f781a0244bbb2581cc6a9d147004d045b14d9f21401be5a0505b300139a471b6470940239a14e53706f6e67654672656e436f696e1b00000001220485f4581ccbed52ccdf43e66ce74d06ec5abc00609fde6126e478f385e34da54fa14a4d6f6f6e4c69676874731a09fa4fe6581ccde38bbc5b8a918799dea79c131188f60074f684ff85b2ab83d1828ca14652554e4e45521a01993aa7581cd5c2ca0ed2163e5023ef2ad35038e8bcce4deca21d9cf369a8c3a3dfa1444c696c791a00063d08581cd97c1e7f3f351dcd0c73e660a8c7907435521984f51513cc8c8a3c45a1464144414e414c1a03e63143581cdcf9e338ba84412a486a5158e9c3b48d37c2cb3d82cd50feb25e368da148536e6f6f70446f671a00073a70581cde9ed35cabf66f21acea089ce102ea0862426a594f0decebc376dcd8a145484f5744591b000000013f3e4d8d581cdee2ab7be90730ab0ee0014730033bc3c582d44387d5295118f86684a1510014df105365636f6e6420436f7573696e1a7ee2ce8c581ce01559f334cd0944755b85c30978fb0b7dabba40ed7c42a80b93c233a147414950414e44411a0005b887581ce1fd836c0e3bdec571800bfaf1270d35eecc5df33ab8fd65cb7524e9a14853686f67676f74681a0013b007581ce6980cf188aa784dfdc0a12d3d7cd00522d9fe859796a0757e89acdea1464f5241434c45199163581ceb963188d7d1ae7fd434519ced48ac2ee5e5a1b411cbb60ad5d7fa9aa14557415445521a01b1c983581cecb623e09b64032b96298233c3271f0f01a9018ee8cf32120ba63d9da1444641574b190c60581cf0b8c1106ab624b725ccc768e00810dbe26e7c61989085d43ffa90efa14850524f554450494719e7ab581cf3fc8638cb9b0016c979cb5543d74264e798b59dce5a66e2c49b0088a14847494741534e454b190ce4581c02d0e9ab901d347fda178338ed20a00bdac7653a6857999860e9e4eca145646f67676f1a0006c322581c036f85e14a3aecbf249bc7ca41ad2901a9e0441abcc302d3270a30dea14953746566446567656e1a00c50e23581c05c4bcecccff054c9aefff8bdc310e1edb8baa0756d912b47ae45d69a1444d65656d191b4c581c07a806334ff73918a8c2ab027f2756ca5f77020a7f2e5b4d0c1cb5b8a145476f6f66791a003f55d5581c1054c32d02670c47d1ba131c7a6b2b0568c6631dbd7c6b466f0395dda1455452554d501a00614de2581c150b4ad1f428ac425efad7339f2462ba17256396724147065b5c2402a14e5448455245414c43415244414e4f1a00cdf136581c1a0dd392a13a966f6957a15a6831d725fbcd756be0511e925fb1e645a14853504143454341541a00198038581c242a2f71c740cab3960a2fcf7197e46b994acf5d210c8cd55fbec9bea145464c4f4b491a00055612581c279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3fa144534e454b199e42581c2a1d71c7dccf7f3f42034b816f6eb943608101156649caa39b2f2ba3a144446167671a000bfdb4581c2f175398ba8ccdf5c1b7ab6e15053d0e7c18cef256f21dd8602de8daa1454261636f6e1a03ecf526581c320369c22975c0c1da4ece524f71a40d20ed9676d704ce712a04a1ffa1434242511a01604483581c3285c7328f24872b0337ef2a03a9dde280c1c8f292104c8465325628a14f4368696c6c477579436861726c657319e2c8581c32f8ff779c13c1d6eee87c3f58a5bcd7da1f924015da8a2356419c58a154536e656b2e66756e204149434453202d204e465401581c36482e256e6a674c18e820a3f899c1df253cc5f36aac0a191ef7126ca14742414e414e414c1a000b3c78581c36b4c38cd4d1cdeac7cfc71c668e7990b660b7ffa7dac40cedf89284a14524435749461a00d90663581c3913c737590668ffdf36ba641de75c81a674fe10b38bfe99e7d4d140a14d0014df104241425944414e5a4f1a00073f0e581c44738ecf49042f27440e01b410f12865c3724c7c1935cb5d9c33672ba1464d63504550451a0098c9e9581c45b80cf858ea9869e0f26ac356cbde8be656fa7dcc82125b85266db9a144444f47451a00012202581c4fccd83d72d9096fb3b31e3341b9126f928b5e2fd67f8fd3f77a1128a14b4352554d4253204341542019b2b2581c5250d4a2b31d7c891cdf1d1454ea2ebbbf65515beca26d76668d37bca1434d61751a0007a120581c553d95979d5f8a67934f089488e156fa4d5f66783043e2fd7cab540ca14542455a4f531a01479bb1581c5a82d8ebf6c1e1ccff4f1b97a41b51979882a0fba756682b9ebd89faa1434e46531a00186b65581c5c63c21b398ffd48b2e60102f65be67118a5f886f9e86fa2dfae75a1a14547524150481a002e252f581c6408659989dd69926352bf01fb507edc7fae658277ae4bab1b7c25baa146474c49544348190e8f581c6619dcb4279b41998aa473d89ac75e70932676152f9c5cc539242a3ea1454d79446f67199047581c6805c7e6085aeaab8969bc631777f3c671ff4709d7e4016e3e3ad1daa145534e494b451a000b3e24581c69aedf22bbf094e26d49685a1fd7bbf02ca66ba99267d1370da8fdf6a144544954531a1db2ff7f581c71b74ad7c487f279d705f2aebf9a334fae3ebd6ec4e82674e4c45fdba14b426f6f626965546f7563681a0001b6ba581c745b8b45b28fadcb50dcc1b1d7a446b23c12115dffd7c5d9821bc64ba14950757373794d696c6b1a0026a95d581c7465c39d26ce9117135ad102e9a611a16b3af93593e7d38166ade35da1474e696b655249501a002c0dcf581c83f22ab6467de8ed6754f9851d7a92a2377071cf94d101d87ca2dbe6a1445045534f1a00011f0d581c8621038ced9d0c8148ed8436f85f271e3de576b02a09c0cb1f5f756ba153536e656b2e66756e2043445358202d204e465401581c9bcf4684077b47f40a38b7fbb36b6dd6274fa34e8ee09f3d2c4305d9a144574f4148190c68581c9d8b23062395bc6009b336b227a867e444442140bf6f076771af59cba1464d55534b4f581b00000006ae2941d1581ca9638a866682d2cc4466c76ca81f4a9a9658a381b42cf0afd07dff46a14458424f58191332581cac0c5c2595fa5104cc10fe11fdf2ab7901ffad8a23b2bdf70de19d4ba1474e6f7468696e671a001ba196581cad0d007f427b066d04251ca764be7e8fca4a97617e034ed2a4f25dd2a148424142594e494b451a000872e9581cad0fbb11ea5355e9dbd7e724f1accae66b9b78e0c91715ff3ffd4053a148534146454d4f4f4e1a00057cbf581cae3bca87ab5a750d17e4995e42a7094ee273379255386f1180a2ceb1a1464f5241434c451a001a0b5d021a000494410758201afc2087dc9782291df35db8d5d84ec30536b8ead1442a4a533ab0585b91a8640b582081388c196d91bcffbb0df5d9b1c1417118036610b19b9d298ee55968f0c94f01a104d9010281d87982583895c2cbd157155089a81facca423b1f697fb44806a0144b1f0bd5c1b530fbc297b0022d5578a07ca638d34bb206f3ab9cfa405149352b1608d87c811903fbf5a11902a2a1636d73678178245b4361726465787363616e5d2053706c697420537761703a20414441202d3e20534e454b"}}
  /api/orders:
    get:
      tags:
        - Tokens
      summary: Get Order History
      description: "Get all historical trades"
      parameters:
        - name: x-api-key
          in: header
          schema:
            type: string
          example: 7c6095cf2eeeac500667241439ab5c3eac2488b9962526ca7f543d76b56a7b2
        - name: address
          in: query
          schema:
            type: string
          example: >-
            addr1q8yx3zhvwv7ehxx9ma5f0h49wc2k56ptswamvzxduv875fn7vxlum3yvsmsjjvlghntrc3m0nrhw7jqk0hfa9ggzgq7qdrw6uq
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tokens/trending:
    get:
      tags:
        - Tokens
      summary: Get Trending Tokens
      description: "Get all trending tokens"
      parameters:
        - name: timeframe
          in: query
          schema:
            type: string
          example: 1 day
        - name: count
          in: query
          schema:
            type: integer
          example: '50'
        - name: x-api-key
          in: header
          schema:
            type: string
          example: 7c6095cf2eeeac500667241439ab5c3eac2488b9962526ca7f543d76b56a7b2
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/token/trades/all:
    get:
      tags:
        - Tokens
      summary: Get All Token Trades
      description: "Get all token trades"
      parameters:
        - name: x-api-key
          in: header
          schema:
            type: string
          example: 7c6095cf2eeeac500667241439ab5c3eac2488b9962526ca7f543d76b56a7b2
        - name: timeframe
          in: query
          schema:
            type: string
          example: 15 mins
        - name: limit
          in: query
          schema:
            type: integer
          example: '10'
        - name: order
          in: query
          schema:
            type: string
          example: asc
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
